<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>https://aruizca.com</link>
    <atom:link href="https://aruizca.com/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Mon., 7 Aug. 2023 11:19:23 +0200</pubDate>
    <lastBuildDate>Mon., 7 Aug. 2023 11:19:23 +0200</lastBuildDate>

    <item>
      <title>Git housekeeping: remove &quot;obsolete&quot; branches from the remote and your local repositories</title>
      <link>https://aruizca.com/blog/2016/01-git-houseleeping-remove-obsolete-branches-from-the-remote-and-your-local-repositories/index.html</link>
      <pubDate>Sun., 31 Jul. 2016 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2016/01-git-houseleeping-remove-obsolete-branches-from-the-remote-and-your-local-repositories/index.html</guid>
      	<description>
	&lt;p&gt;&lt;img src=&quot;https://aruizca.com/blog/2016/img/git-clean.png&quot; alt=&quot;git clean&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Recently I was faced with the task of cleaning up a Git repository whose branches were not &quot;pruned&quot; for a few years, so I am talking about several hundreds of branches.&lt;/p&gt; 
&lt;p&gt;This situation can make using Git through the command line or a GUI front-end client a very cumbersome experiece. That&apos;s why I usually recommend, as a general rule, to delete any feature or bugfix branch after it gets merged to a &quot;higher level&quot; branch. Because they became &lt;strong&gt;&quot;redundant&quot;&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;The real task here is to clean up the remote branch as you can always clone the repo locally again and start from scratch. I started deleting them manually because I am not a Git guru and I am very cautius whenever I have to tempre with the remote repositorory. Soon enough I realized I was not getting anywhere and start looking for a script to help me.&lt;/p&gt; 
&lt;h1&gt;Script to clean up the remote repository&lt;/h1&gt; 
&lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt; &lt;i class=&quot;fa fa-exclamation-triangle&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Please use it at your own risk. &lt;i class=&quot;fa fa-exclamation-triangle&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 
 &lt;br&gt; It worked for me using Git 2.9.2, but it should work with earlier versions. 
 &lt;br&gt; Although branches are removed, the metadata of the branch and the relevant commits will remain there, so it is always possible to recreate any branch that should not have been deleted. 
&lt;/div&gt; 
&lt;pre&gt;&lt;code&gt;## Remove remote branches that are already merged with master
git checkout master
# Dry-run: check the branch names list before they get deleted for good
git branch -ar --merged master | grep -v HEAD | grep -v master
# If you are really sure, then remove them from remote repo
git branch -ar --merged master | grep -v HEAD | grep -v master | sed &quot;s/origin\///&quot; | xargs -n 1 git push origin --delete
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Breaking it down&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;git checkout master
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;In this case I chose the master branch, but if you want to clean more recent branches you can replace all the &lt;code&gt;master&lt;/code&gt; branch references with &lt;code&gt;develop&lt;/code&gt; in all the commands.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;git branch -ar --merged master
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Get list of remote branches that have already been merged with the &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;grep -v HEAD | grep -v master
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Remove those items from the list that contains the words &lt;code&gt;HEAD&lt;/code&gt; or &lt;code&gt;master&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;sed &quot;s/origin\///&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;For each remaining element in the list, remove the &lt;code&gt;origin/&lt;/code&gt; name prefix&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;xargs -n 1 git push origin --delete
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Execute the git remote branch delete command for each element in the list.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Script to clean up the local repository&lt;/h1&gt; 
&lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt; 
 &lt;h3&gt;Deprecated&lt;/h3&gt; 
 &lt;p&gt;Just use &lt;a href=&quot;https://github.com/tj/git-extras&quot; target=&quot;_blank&quot;&gt;Git Extras&lt;/a&gt; instead (eg: `git delete-merged-branches` or `git delete-squashed-branches`&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;If you have been working on a repository for a while, it might be that you have local copy of a few branches that are no longer valid and need to be &quot;pruned&quot;.&lt;/p&gt; 
&lt;p&gt;To achieve that we can execute a small variation of the previous script.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;## Remove local branches that are already merged with master

git checkout master
# Dry-run: check the branch names list before they are deleted
git branch --merged master | grep -v &quot;master&quot;
# If you are really sure, then remove them from local repo
git branch --merged master | grep -v &quot;master&quot; | xargs -n 1 git branch -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Acknowlegment&lt;/h3&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/stevenharman&quot;&gt;@StevenHarman&lt;/a&gt;, whose &lt;a href=&quot;http://stevenharman.net/git-clean-delete-already-merged-branches&quot;&gt;post&lt;/a&gt; showed me how to clean the local repo and gave me the idea to do same on the remote repo.&lt;/p&gt; 
&lt;p&gt;Feedback and improvements are welcome!! :-)&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Extract Webjars static resources with Gradle for jBake (or anything really...)</title>
      <link>https://aruizca.com/blog/2015/04-extract-webjars-static-resources-with-gradle/index.html</link>
      <pubDate>Mon., 31 Aug. 2015 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2015/04-extract-webjars-static-resources-with-gradle/index.html</guid>
      	<description>
	&lt;p&gt;&lt;a href=&quot;https://www.webjars.org/&quot; target=&quot;_blank&quot;&gt;&lt;br&gt; &lt;img src=&quot;https://aruizca.com/blog/2015/img/gradle-webjars.png&quot; alt=&quot;gradle and webjars&quot;&gt;&lt;br&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For those of you who never heard of it before, &lt;a href=&quot;http://www.webjars.org/&quot;&gt;WebJars&lt;/a&gt; is an open and community driven initiative that tries to leverage the existing Maven based dependecy resolution tools and principles to manage the client side dependencies of your web application. Each WebJar is a standar JAR file that contains a set of curated files (Classic WebJars) for a given library. Recently you can also reference Bower and NPM packages but I would not recommend it.&lt;/p&gt; 
&lt;p&gt;Previously I have tried using Bower alongside both Grunt and Gulp and they brought me straight back to the times were Ant was the predominant build tool in the Java EE world where everyone was doing its own thing with a complete lack of conventions.&lt;/p&gt; 
&lt;p&gt;After using WebJars in Java web projects I started looking how to use it in static web sites, more especifically those generated with &lt;a href=&quot;http://jbake.org/&quot;&gt;jBake&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The final aim is to avoid checking in the web dependencies, like Javaacript based libraries, in our SCM tool. It turns out that &lt;a href=&quot;http://melix.github.io/blog/2014/02/hosting-jbake-github.html&quot;&gt;jBake can be used with Gradle&lt;/a&gt;, which means that we have the chance of managing all my dependencies using a single tool that happens to be a lot better than anything available on the Javascript-Node ecosystem.&lt;/p&gt; 
&lt;p&gt;Declaring your WebJars dependency is as easy as declaring any other Maven based dependency, but in this case we group them in a &lt;a href=&quot;https://docs.gradle.org/current/userguide/artifact_dependencies_tutorial.html#configurations&quot;&gt;custom Gradle dependency configuration&lt;/a&gt; that we will call &lt;code&gt;webjars&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;...
dependencies {
    webjars &apos;org.webjars:jquery:2.1.3&apos;
    webjars &apos;org.webjars:bootstrap:3.3.4&apos;
    webjars &apos;org.webjars:highlightjs:8.4-4&apos;
    webjars &apos;org.webjars:font-awesome:4.3.0-1&apos;
    webjars &apos;org.webjars:jquery.tocify.js:1.9.0&apos;
    webjars &apos;org.webjars:Magnific-Popup:1.0.0&apos;
}
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the case of jBake we need a custom task to extract the web dependencies assets at build time from the resolved WebJars:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;task(&apos;webjars resources extraction&apos;, type: Copy) {
    configurations.webjars.each {jar -&amp;gt;

        def config = configurations.webjars.resolvedConfiguration
        def artifact = config.resolvedArtifacts.find {
            it.file.toString() == jar.absolutePath
        }

        def upStreamVersion = &quot;${artifact.moduleVersion.id.version}&quot;
        upStreamVersion = upStreamVersion.replaceAll(/(-[\d.-]+)/, &apos;&apos;)

        copy {
            from zipTree(jar)
            into file(&quot;${buildDir}/webjars-content/${artifact.name}&quot;)
        }
        copy {
            from &quot;${buildDir}/webjars-content/${artifact.name}/META-INF/resources/webjars/${artifact.name}/${upStreamVersion}&quot;,
                 &quot;${buildDir}/webjars-content/${artifact.name}/META-INF/resources/webjars/${artifact.name}/${artifact.moduleVersion.id.version}&quot;

            into &quot;${jbake.input}/assets/vendor/${artifact.name}&quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This task will extract all the libraries inside a folder called &lt;code&gt;/assets/vendor/&lt;/code&gt;. As you can appreciate this script can be easily customized to fit other platforms and build processes.&lt;/p&gt; 
&lt;p&gt;You can check my entire &lt;a href=&quot;https://github.com/aruizca/ajaxanywhere-site/blob/master/build.gradle&quot;&gt;&lt;code&gt;build.gradle&lt;/code&gt; file at GitHub for reference&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There are two things that I would like to stand out and I hope, albeit improbable, the message will get out there:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;By 2016, no project should store their web dependencies in their SCM tool. The same way we don do it with our server side dependencies or IDE metadata.&lt;/li&gt; 
 &lt;li&gt;The fact that I am using jBake here is just an anecdote. This proof of concept sets the basis on which to develop applications for all sort of platforms, including NodeJS, using Gradle as the build tool to perform all kind of operations including the web dependencies resolution using with the WebJars. I am pretty sure that &lt;strong&gt;Gradle + WebJars combined with the &lt;a href=&quot;https://github.com/bertramdev/asset-pipeline-core/&quot;&gt;Asset-Pipeline&lt;/a&gt; are the best toolset to develop multiplatform web applications&lt;/strong&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;It took me long enough time to find out, so I thought I would make a post for anyone else who is after the answer in the future.&lt;/p&gt; 
&lt;p&gt;In Groovy code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;log.debug(&quot;ElasticSearch Query using Java Client API:\n${searchRequestBuilder.internalBuilder()}&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And this in Java:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;log.debug(&quot;ElasticSearch Query using Java Client API:\n&quot; + searchRequestBuilder.internalBuilder());
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The output is prettified by default.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>My steps to setup elementaryOS Freya</title>
      <link>https://aruizca.com/blog/2015/03-my-steps-to-setup-elementaryos-freya/index.html</link>
      <pubDate>Fri., 27 Mar. 2015 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2015/03-my-steps-to-setup-elementaryos-freya/index.html</guid>
      	<description>
	&lt;p&gt;&lt;a href=&quot;https://elementary.io/&quot; target=&quot;_blank&quot;&gt;&lt;br&gt; &lt;img src=&quot;https://aruizca.com/blog/2015/img/elementary-os-icon.png&quot; alt=&quot;elementary os&quot;&gt;&lt;br&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;I have decided to give a go to the latest release of the &lt;a href=&quot;https://elementary.io/&quot;&gt;elementaryOS Linux distribution&lt;/a&gt;, &lt;strong&gt;Freya&lt;/strong&gt;, and see if it can become my distro of choice for software development. Main reason being that: elementary OS is essentially a Ubuntu (14.04 in this case) based Linux system that just works but wrapped in a really beautiful, smooth and minimalistic interface. All its features make the elementary os usage experience to stand out from all the other Linux distributions I have tried. Even the command line terminal has its own personality, definitely contributing as a differentiation factor.&lt;/p&gt; 
&lt;p&gt;You only have to boot the OS once and after 4 to 5 seconds (I am using a SSD) you instantly feel atracted to the aesthetics of the desktop. Then after a few minutes using it, everything: the screen transitions, the animations, the notifications, ... makes a delight to your eyes and leaves you with a pleasant sense of lightness and responsiveness. Give it a go and you&apos;ll see that the praises don&apos;t stop with the looks :-)&lt;/p&gt; 
&lt;p&gt;So far I have been using it in a VM with good results, so I am going to leave here all the steps I followed in order to get it ready for &quot;business&quot; in my laptop after I finished the standard installation process:&lt;/p&gt; 
&lt;h3&gt;Using &quot;oduso&quot; to install many desktop applications automatically&lt;/h3&gt; 
&lt;p&gt;They have a wide range of common used apps available like web browsers ,text editors and many others...&lt;/p&gt; 
&lt;p&gt;Just go to their website and choose the apps, icons sets, themes and options you want: &lt;a href=&quot;https://oduso.com/&quot;&gt;https://oduso.com/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;It will then generate a unique url and give you the command that needs to be executed to start the automatic installation process:&lt;/p&gt; 
&lt;p&gt;Mine for instance is:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;wget -O - oduso.com/dt2r.sh | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install Linuxbrew:&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href=&quot;https://github.com/Homebrew/linuxbrew&quot;&gt;https://github.com/Homebrew/linuxbrew&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Installation:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt-get install build-essential curl git m4 ruby texinfo libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev zlib1g-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/linuxbrew/go/install)&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add this to &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.profile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;export PATH=&quot;$HOME/.linuxbrew/bin:$PATH&quot;
export MANPATH=&quot;$HOME/.linuxbrew/share/man:$MANPATH&quot;
export INFOPATH=&quot;$HOME/.linuxbrew/share/info:$INFOPATH&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install JDK 8&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Original guide: &lt;a href=&quot;http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html&quot;&gt;http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Installation:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;su -
echo &quot;deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main&quot; | tee /etc/apt/sources.list.d/webupd8team-java.list
echo &quot;deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main&quot; | tee -a /etc/apt/sources.list.d/webupd8team-java.list
apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886
apt-get update
apt-get install oracle-java8-installer
exit
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Modify &lt;code&gt;.profile&lt;/code&gt; to add &lt;code&gt;JAVA_HOME&lt;/code&gt; system variable and set bin folder inside the &lt;code&gt;PATH&lt;/code&gt; variable:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;export JAVA_HOME=&quot;/usr/lib/jvm/java-8-oracle/&quot;
export PATH=$PATH:$JAVA_HOME/bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install GVM&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href=&quot;http://gvmtool.net/&quot;&gt;http://gvmtool.net/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Installation:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;curl -s get.gvmtool.net | bash
source &quot;~/.gvm/bin/gvm-init.sh&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install Maven&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href=&quot;http://maven.apache.org/&quot;&gt;http://maven.apache.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Installation:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;brew install maven
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install Git&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href=&quot;http://git-scm.com/&quot;&gt;http://git-scm.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Installation:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;brew install git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install IntellijIDEA&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;https://www.jetbrains.com/idea/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Original guide: &lt;a href=&quot;http://askubuntu.com/questions/272314/setup-and-install-intellij-with-jdk&quot;&gt;http://askubuntu.com/questions/272314/setup-and-install-intellij-with-jdk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Installation:&lt;/li&gt; 
 &lt;li&gt;Download latest release from website: &lt;a href=&quot;https://www.jetbrains.com/idea/download/&quot;&gt;https://www.jetbrains.com/idea/download/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Extract content:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;tar -zxvf Downloads/ideaIU-xxx.tar.gz
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Move ideaIU-xxx folder to &lt;code&gt;/opt/idea&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo mv idea-IU-xxx/ /opt/idea
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create symlink inside &lt;code&gt;/usr/local/bin&lt;/code&gt; to &lt;code&gt;/opt/idea/bin/idea.sh&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;sudo ln -s /opt/idea/bin/idea.sh /usr/local/bin/idea
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create file &lt;code&gt;idea.desktop&lt;/code&gt; with the following content:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;[Desktop Entry]
Name=IntelliJ IDEA
Type=Application
Exec=idea
Terminal=false
Icon=idea
Comment=Integrated Development Environment
NoDisplay=false
Categories=Development;IDE;
Name[en]=IntelliJ IDEA 
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install previus file:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;sudo desktop-file-install idea.desktop
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install icon so it is displayed in the menu:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;sudo cp /opt/idea/bin/idea.png /usr/share/pixmaps/idea.png
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install Applications menu editor &quot;MenuLibre&quot;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href=&quot;http://smdavis.us/projects/menulibre/&quot;&gt;http://smdavis.us/projects/menulibre/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Original guide: &lt;a href=&quot;http://eos-snippets.blogspot.com.au/2014/02/menu-editor-menulibre.html&quot;&gt;http://eos-snippets.blogspot.com.au/2014/02/menu-editor-menulibre.html&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Installation:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt-add-repository ppa:versable/elementary-update
sudo apt-get update
sudo apt-get install menulibre

&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install Microsoft fonts&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installation:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt-get install ttf-mscorefonts-installer
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install Skype&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href=&quot;http://www.skype.com/en/download-skype/skype-for-computer/&quot;&gt;http://www.skype.com/en/download-skype/skype-for-computer/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Original guide: &lt;a href=&quot;http://linuxg.net/skype-4-3-is-now-available-via-the-canonical-partner-repository-for-ubuntu-14-04-and-ubuntu-12-04-installation-instructions/&quot;&gt;http://linuxg.net/skype-4-3-is-now-available-via-the-canonical-partner-repository-for-ubuntu-14-04-and-ubuntu-12-04-installation-instructions/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Installation:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;sudo add-apt-repository &quot;deb http://archive.canonical.com/ trusty partner&quot;
sudo apt-get update
sudo apt-get install skype
&lt;/code&gt;&lt;/pre&gt;
	</description>
    </item>
    <item>
      <title>How to reference a file inside a Grails plugin</title>
      <link>https://aruizca.com/blog/2015/02-debugging-elasticsearch-java-api-queries-as-json-rest-queries/index.html</link>
      <pubDate>Wed., 25 Mar. 2015 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2015/02-debugging-elasticsearch-java-api-queries-as-json-rest-queries/index.html</guid>
      	<description>
	&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/products/elasticsearch&quot; target=&quot;_blank&quot;&gt;&lt;br&gt; &lt;img src=&quot;https://aruizca.com/blog/2015/img/elasticsearch-java-json.png&quot; alt=&quot;elasticsearch-java-json&quot;&gt;&lt;br&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;It took me long enough time to find out, so I thought I would make a post for anyone else who is after the answer in the future.&lt;/p&gt; 
&lt;p&gt;In Groovy code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;log.debug(&quot;ElasticSearch Query using Java Client API:\n${searchRequestBuilder.internalBuilder()}&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And this in Java:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;log.debug(&quot;ElasticSearch Query using Java Client API:\n&quot; + searchRequestBuilder.internalBuilder());
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The output is prettified by default.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Integrated vs Functional testing: how to test REST APIs in Grails using Spock</title>
      <link>https://aruizca.com/blog/2015/01-integrated-vs-functional-testing-how-to-test-rest-apis-in-grails-using-spock/index.html</link>
      <pubDate>Thu., 19 Mar. 2015 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2015/01-integrated-vs-functional-testing-how-to-test-rest-apis-in-grails-using-spock/index.html</guid>
      	<description>
	&lt;p&gt;&lt;a href=&quot;https://spockframework.org/&quot; target=&quot;_blank&quot;&gt;&lt;br&gt; &lt;img src=&quot;https://aruizca.com/blog/2015/img/grails-spock.png&quot; alt=&quot;Grails and Spock&quot;&gt;&lt;br&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;div class=&quot;alert alert-warning&quot;&gt; &lt;i class=&quot;fa fa-exclamation-triangle fa-fw&quot;&gt;&lt;/i&gt; This guide was written using &lt;strong&gt;Grails 2.4.4&lt;/strong&gt; although it should work the same for Grails 2.3.x and 3.x (almost the same :-P)
 &lt;br&gt; 
&lt;/div&gt; 
&lt;p&gt;Since current &lt;a href=&quot;http://grails.github.io/grails-doc/2.4.x/guide/testing.html&quot;&gt;official documentation&lt;/a&gt; only covers unit testing for controllers and that it took me a while to to figure them out completely, I thought I would leave it here in case it helps someone else.&lt;/p&gt; 
&lt;p&gt;The reason for writing these tests was to validate some REST API endpoints implemented using Grails Controllers.&lt;/p&gt; 
&lt;p&gt;So given the following simple and pure didactic domain object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;class Book {

    String title

    static constraints = {
        title blank: false, unique: true
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and its respective controller:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;import grails.converters.JSON
import grails.rest.RestfulController

class BookController extends RestfulController&amp;lt;Book&amp;gt; {
    static responseFormats = [&apos;json&apos;]

    BookController() {
        super(Book)
    }

    @Override
    def save() {
        def jsonParams = request.JSON
        render new Book(title: jsonParams.title).save() as JSON
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;with its respective URL mapping:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;...
&quot;/books/$id?&quot;(controller: &apos;book&apos;) {
	action = [POST: &apos;save&apos;]
}
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These are the two type of tests you can implement:&lt;/p&gt; 
&lt;h2&gt;Integration Test&lt;/h2&gt; 
&lt;p&gt;First of all, forget about the &lt;code&gt;@TestFor&lt;/code&gt; annotations, because those are just for unit tests.&lt;/p&gt; 
&lt;p&gt;This is how the integration test looks like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;import grails.test.spock.IntegrationSpec
import rest.sample.Book
import rest.sample.BookController
import spock.lang.Shared

class BookControllerSpec extends IntegrationSpec {

    @Shared BookController controller = new BookController()

    def setup() {
        // Initialize DB
        new Book(title: &quot;title1&quot;).save()
    }

    def cleanup() {
    }

    void &quot;test creating a book&quot;() {
        when:
        // Set request JSON body
        controller.request.json = [
            title: &quot;title2&quot;
        ]
        controller.save()
        def response = controller.response.json

        then:
        response.title == &quot;title2&quot;
        Book.count == 2
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As you can appreciate &lt;strong&gt;this is not really the best way to test a REST API&lt;/strong&gt; in my opinion. Not only look a bit cumbersome but also and more importantly, it is not a really end to end (e2e) test.&lt;/p&gt; 
&lt;p&gt;So how do we implemet a complete e2e test using a REST client if the Integration tests does not run a web server and Grails lacks built-in support for Functional testing (Grails 3.x &lt;a href=&quot;http://grails.github.io/grails-doc/3.0.x/guide/testing.html#functionalTesting&quot;&gt;has it&lt;/a&gt;)? Let&apos;s find the answer in the next section.&lt;/p&gt; 
&lt;h2&gt;Functional Test&lt;/h2&gt; 
&lt;p&gt;First of all we need to enable functional test via plugin. There are quite a few to choose from but we need those that support Spock tests like:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://grails.org/plugin/funky-spock&quot;&gt;Funcky Spock Plugin&lt;/a&gt;: which is good enough to test a REST API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://grails.org/plugin/geb&quot;&gt;Geb integration for Grails Plugin&lt;/a&gt;: on top of enabling functional Spock tests, it also allows you to use the &lt;a href=&quot;http://www.gebish.org/&quot;&gt;&lt;strong&gt;Geb&lt;/strong&gt; e2e browser testing framework&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Although the first one is more than enough, I chose the Geb plugin to be inline with Grails 3 choice :-) &lt;strong&gt;To integrate the Geb plugin&lt;/strong&gt;, we need to add the following dependencies in our &lt;code&gt;BuildConfig.groovy&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;dependencies {
  ...
  test &quot;org.gebish:geb-spock:0.10.0&quot;
  ...
}

plugins {
  ...
  test &quot;:geb:0.10.0&quot;
  ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then I had to create the folder: &lt;code&gt;/tests/functional&lt;/code&gt; to put our functional tests there.&lt;/p&gt; 
&lt;p&gt;As the REST client I will be using the &lt;a href=&quot;http://grails.org/plugin/rest-client-builder&quot;&gt;&lt;strong&gt;Rest Client Builder plugin&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This is how the functional test looks like with the forementioned &quot;ingredients&quot;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;import grails.plugins.rest.client.RestBuilder
import grails.plugins.rest.client.RestResponse
import grails.test.spock.IntegrationSpec
import rest.sample.Book
import spock.lang.Shared

class BookControllerFunctionalSpec extends IntegrationSpec {
    
    @Shared
    def grailsApplication

    def setup() {
        // Initialize DB
        new Book(title: &quot;title1&quot;).save()
    }

    def cleanup() {
    }

    void &quot;test creating a book&quot;() {
        given:
        RestBuilder rest = new RestBuilder()

        when:
        RestResponse response = rest.post(&quot;http://localhost:8080/${grailsApplication.metadata.&apos;app.name&apos;}/books&quot;) {
            json([
                title: &quot;title2&quot;
            ])
        }

        then:
        response.status == 200
        response.json.title == &quot;title2&quot;
        Book.count == 2
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Thank you for reaching this paragraph. I hope it helped you. If any of you guys think there is a better approach, by all means, please let me know.&lt;/p&gt; 
&lt;p&gt;You can find the rpoject with the source code here: &lt;a href=&quot;https://github.com/aruizca/rest-api-test-example&quot;&gt;https://github.com/aruizca/rest-api-test-example&lt;/a&gt;&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>How to render JSON properly (without escaping quotes) inside a GSP script tag</title>
      <link>https://aruizca.com/blog/2014/08-how-to-render-json-properly-without-escaping-quotes-inside-a-gsp-script-tag/index.html</link>
      <pubDate>Wed., 19 Nov. 2014 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2014/08-how-to-render-json-properly-without-escaping-quotes-inside-a-gsp-script-tag/index.html</guid>
      	<description>
	&lt;p&gt;&lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;&lt;br&gt; &lt;img src=&quot;https://aruizca.com/blog/2014/img/grails.png&quot; alt=&quot;Grails logo&quot;&gt;&lt;br&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;div class=&quot;alert alert-warning&quot;&gt;
  This issue was encountered while using Grails version 2.3.11 
&lt;/div&gt; 
&lt;p&gt;In theory it should be as simple as:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Return JSON in your model from your controller&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;def index() = {
	[data: data as JSON]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol&gt; 
 &lt;li&gt;Render the model attribute without encoding using the raw() method&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;&amp;lt;r:script&amp;gt;
	var data = ${raw(data)};
&amp;lt;/r:script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unfortunately this does not work, at least when you are using the resources plugin. You know it does not work because all the quotes have been escaped and they should have not:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
	var data = {&amp;amp;quot;whatever&amp;amp;quot;:&amp;amp;quot;whatever&amp;amp;quot;};
&amp;lt;script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It took me a while to find a way of doing it using the &lt;strong&gt;applyCodec&lt;/strong&gt; taglib. Just replace the previous second step with this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;&amp;lt;r:script&amp;gt;
	&amp;lt;g:applyCodec encodeAs=&quot;none&quot;&amp;gt;
		var data = ${data};
    &amp;lt;/g:applyCodec&amp;gt;
&amp;lt;/r:script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;as a result you will see that is has been rendered properly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
	var data = {&quot;whatever&quot;:&quot;whatever&quot;};
&amp;lt;script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Link to related issues:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jira.grails.org/browse/GRAILS-11829&quot;&gt;https://jira.grails.org/browse/GRAILS-11829&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Update&lt;/h2&gt; 
&lt;p&gt;You can also use gsp page directives like these ones to set the encoding mechanism on a single page basis:&lt;br&gt; - Remove enconding from EL expressions:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;%@ expressionCodec=&quot;none&quot; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Remove encoding from scriplets:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;%@ scriptletCodec=&quot;none&quot; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Remove encoding everywhere in the page:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;%@ defaultCodec=&quot;none&quot; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
	</description>
    </item>
    <item>
      <title>How to integrate RabbitVCS with Nautilus file manager in Ubuntu 14.04 Trusty Tahr</title>
      <link>https://aruizca.com/blog/2014/07-how-to-integrate-rabbitvcs-with-nautilus-file-manager-in-ubuntu-14-04-trusty-tahr/index.html</link>
      <pubDate>Tue., 27 May 2014 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2014/07-how-to-integrate-rabbitvcs-with-nautilus-file-manager-in-ubuntu-14-04-trusty-tahr/index.html</guid>
      	<description>
	&lt;p&gt;&lt;a href=&quot;http://rabbitvcs.org/&quot; title=&quot;RabbitVCS website&quot; target=&quot;_blank&quot;&gt;&lt;br&gt; &lt;img src=&quot;https://aruizca.com/blog/2014/img/rabbitvcs-post-logo.png&quot; alt=&quot;RabbitVCS Git client in Ubuntu&quot;&gt;&lt;br&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;There are still some instances of very nice applications that do not work straight away after installing them via the apt package manager and unfortunately RabbitVCS is one of them.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://rabbitvcs.org/&quot; title=&quot;RabbitVCS website&quot; target=&quot;_blank&quot;&gt;RabbitVCS&lt;/a&gt; is for Linux what &lt;a href=&quot;https://code.google.com/p/tortoisegit/&quot; title=&quot;TortoiseGit website&quot; target=&quot;_blank&quot;&gt;TortoiseGit&lt;/a&gt; and &lt;a href=&quot;http://tortoisesvn.net/&quot; title=&quot;TortoiseSVN website&quot; target=&quot;_blank&quot;&gt;TortoiseSVN&lt;/a&gt; are for the Windows platform. It is a SCM client that integrates itself with the OS file manager to manage local Git or SVN repositories.&lt;/p&gt; 
&lt;p&gt;Today I wanted to install RabbitVCS (v0.16.0) in Ubuntu 14.04 which has the tool already available in the default package repositories. So normally, it should be enough to execute the following commands and have it ready to go:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;	$ sudo apt-get update
	$ sudo apt-get install rabbitvcs-nautilus3
    # Optional
    $ sudo apt-get install rabbitvcs-gedit
	$ sudo apt-get install rabbitvcs-cli
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;sadly that did not happen for me, so I decided to summarize the set of commands I have gathered to make it work:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;~~Create symlinks~~&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;	$ sudo ln -sf /usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0 /usr/lib/
	$ sudo ln -sf /usr/lib/x86_64-linux-gnu/libpython2.7.so.1 /usr/lib/
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;~~Replace RabbitVCS.py script with latest from source code~~&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;    $ wget http://rabbitvcs.googlecode.com/svn/trunk/clients/nautilus-3.0/RabbitVCS.py  /usr/share/nautilus-python/extensions
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Change access rights to your local RabbitCVS configuration folder. It did not worked until I did this, so previous steps might not be needed. If you try let me know please.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;    $ chown -R $USER:$USER ~/.config/rabbitvcs
    
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When working you should be able to see the RabbitVCS context submenu when using Nautilus like in the following snapshot:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://aruizca.com/blog/2014/img/rabbitvcs-nautilus-integration.png&quot; alt=&quot;RabbitVCS Nautilus integration&quot;&gt;&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Steps to create a Vagrant Base Box with Ubuntu 14.04 Desktop (GUI) and VirtualBox</title>
      <link>https://aruizca.com/blog/2014/06-steps-to-create-a-vagrant-base-box-with-ubuntu-14-04-desktop-gui-and-virtualbox/index.html</link>
      <pubDate>Fri., 23 May 2014 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2014/06-steps-to-create-a-vagrant-base-box-with-ubuntu-14-04-desktop-gui-and-virtualbox/index.html</guid>
      	<description>
	&lt;p&gt;&lt;img src=&quot;https://aruizca.com/blog/2014/img/vagrant-virtualbox-ubuntu-post-title.png&quot; alt=&quot;Vagrant + VirtualBox + Ubuntu = Ubuntu Boxes&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Since the advent of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Cloud_computing#Infrastructure_as_a_service_.28IaaS.29&quot; title=&quot;Infrastructure as a Service&quot; target=&quot;_blank&quot;&gt;IaaS&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Platform_as_a_service&quot; title=&quot;Platform as a Service&quot; target=&quot;_blank&quot;&gt;PaaS&lt;/a&gt; providers, the decline in usage of monolithic architectures (e.g.: application server + relational DB) and the need for distributed and automatically scalable applications, as software developers we have to be increasingly more aware and skilled in the tools and techniques used to orchestrate and automate the deployment of all the different components that our architecture might end up with.&lt;/p&gt; 
&lt;p&gt;Among these tools, normally encompassed in the DevOps space, I am currently very interested in &lt;a href=&quot;http://www.vagrantup.com/&quot; title=&quot;Vagrant Website&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Vagrant&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.docker.io/&quot; title=&quot;Docker Website&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;http://www.ansible.com&quot; title=&quot;Ansible Website&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Ansible&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://juju.ubuntu.com/&quot; title=&quot;Ubuntu JuJu Website&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Ubuntu JuJu&lt;/strong&gt;&lt;/a&gt;. Although I already use Vagrant, today I decided I wanted to know how to create my own &lt;a href=&quot;http://docs.vagrantup.com/v2/boxes/base.html&quot; title=&quot;What is a Vagrant Base Box?&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Base Boxes&lt;/strong&gt;&lt;/a&gt; that I can reuse. My idea is to have two Linux Base Boxes with Ubuntu Server and Ubuntu Desktop respectively and then another two with Windows 7 and 8. Once Vagrant is covered I want to get deeper with Docker because I see a lot of potential in lightweight containers instead of using heavy virtual machines.&lt;/p&gt; 
&lt;p&gt;Most of the guides out there focus on Linux distributions without GUI, so I decided that while I am creating my Vagrant Base Box with Ubuntu 14.04 Desktop I would document all the relevant steps next:&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Step 1: Create the Virtual Machine with Virtual Box&lt;/h2&gt; 
&lt;h3&gt;- Install VirtualBox&lt;/h3&gt; 
&lt;p&gt;Download relevant VirtualBox installable package for your host system from the website: &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;https://www.virtualbox.org/&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;- Download Ubuntu ISO&lt;/h3&gt; 
&lt;p&gt;I have downloaded the 64bit Desktop ISO: &lt;a href=&quot;http://www.ubuntu.com/download/desktop&quot;&gt;http://www.ubuntu.com/download/desktop&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;- Define your Virtual Machine taking into consideration that:&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;The first network interface (adapter 1) must be a NAT adapter.&lt;/li&gt; 
 &lt;li&gt;For convenience the Virtual Disk should be Dynamic (&lt;strong&gt;VMDK&lt;/strong&gt;), so don&apos;t bee too stingy with the disk size ( &amp;gt;= 10GB IMO ).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src=&quot;https://aruizca.com/blog/2014/img/virtualbox-settings.png&quot; alt=&quot;VirtualBox settings&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;- Load the ISO as part of the VM storage and install the OS.&lt;/h3&gt; 
&lt;h3&gt;- Username and Password should be: &lt;strong&gt;vagrant&lt;/strong&gt; (for convenience, not for security).&lt;/h3&gt; 
&lt;h3&gt;- Once installed unload the ISO and restart the VM.&lt;/h3&gt; 
&lt;h3&gt;- Install the &lt;strong&gt;&quot;Guest Additions&quot;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;Before installing the Guest Additions, you will have to prepare your guest system for building external kernel modules:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;	$ sudo apt-get install dkms
	$ sudo /etc/init.d/vboxadd setup
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and install the build-essential package and linux headers to compile the Guest Additions propertly&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;	$ sudo apt-get install -y build-essential linux-headers-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then Mount guest additions ISO via virtualbox window and follow the indications to run the installation script :&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://aruizca.com/blog/2014/img/vitualbox-guest-addtions.png&quot; alt=&quot;VirtualBox Guest Additions&quot;&gt;&lt;/p&gt; 
&lt;p&gt;If the sytems does not install it automatically you can use the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;	$ sudo mount /dev/cdrom /media/cdrom
	$ sudo /media/cdrom/VBoxLinuxAdditions.run
	$ sudo umount /media/cdrom
	$ sudo apt-get clean
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Step 2: Setup guest OS (Ubuntu 14.04 64bit) with the minimum necessary.&lt;/h2&gt; 
&lt;h3&gt;- Use &quot;Software Updater&quot; to get latest updates. Or if you are using the command line:&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;	$ sudo apt-get update -y
	$ sudo apt-get upgrade -y
	# Restart the machine
	$ sudo shutdown -r now
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;- Add the &lt;strong&gt;vagrant&lt;/strong&gt; user to sudoers file:&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;	$ sudo su -
	$ visudo
	# Add the following line to the end of the file.
	vagrant ALL=(ALL) NOPASSWD:ALL
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;- Install Vagrant Public Keys&lt;/h3&gt; 
&lt;p&gt;This way we can SSH to the machine without entering the password:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;	$ mkdir -p /home/vagrant/.ssh
	$ wget --no-check-certificate https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub -O /home/vagrant/.ssh/authorized_keys
	# Ensure we have the correct permissions set
	$ chmod 0700 /home/vagrant/.ssh
	$ chmod 0600 /home/vagrant/.ssh/authorized_keys
	$ chown -R vagrant /home/vagrant/.ssh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install OpenSSH Server&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;	$ sudo apt-get install -y openssh-server
	$ sudo vi /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ensure the following is set:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Port 22&lt;/li&gt; 
 &lt;li&gt;PubKeyAuthentication yes&lt;/li&gt; 
 &lt;li&gt;AuthorizedKeysFile %h/.ssh/authorized_keys&lt;/li&gt; 
 &lt;li&gt;PermitEmptyPasswords no&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;	$ sudo service ssh restart
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Save &amp;amp; close the file then restart SSH.&lt;/p&gt; 
&lt;h2&gt;Step 3: Package the Box&lt;/h2&gt; 
&lt;h3&gt;Compact space and shut the VM down&lt;/h3&gt; 
&lt;p&gt;You can remove those packages that you don&apos;t consider necessary (e.g.: LibreOffice) and execute the following commands to save space and shut the VM down:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;	$ sudo dd if=/dev/zero of=/EMPTY bs=1M
	$ sudo rm -f /EMPTY
	# Shutdown the machine
	$ sudo shutdown -h now
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Create Vagrant Base Box&lt;/h3&gt; 
&lt;p&gt;Asuming you already have Vagrant installed in the host system, just run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;	$ vagrant package –-base &amp;lt;VitualBox VM Name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;in my case:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;	$ vagrant package –-base Ubuntu-14.04-64-Desktop
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;this will create a file called &lt;strong&gt;package.box&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Install the box&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;	$ vagrant box add {boxname} package.box
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;in my case:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;	$ vagrant box add Ubuntu-14.04-64-Desktop package.box
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Init a Vagrant Box by referencing the Base one we have created&lt;/h3&gt; 
&lt;p&gt;Go to a different folder and type:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;	$ vagrant init {boxname}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;in my case:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;	$ vagrant init Ubuntu-14.04-64-Desktop
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Enable GUI&lt;/h3&gt; 
&lt;p&gt;Edit the generated &lt;strong&gt;Vagrantfile&lt;/strong&gt; by uncommenting the following lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;	config.vm.provider &quot;virtualbox&quot; do |v|
	v.gui = true
	end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Spin it up!&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;	$ vagrant up
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and you should be able to SSH the machine and see the VM running:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://aruizca.com/blog/2014/img/vagrant-box-running.png&quot; alt=&quot;VirtualBox Guest Running&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Please let me know if you find something that is incorrect or inaccurate.&lt;/p&gt; 
&lt;p&gt;Cheers.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>How to reference a file inside a Grails plugin</title>
      <link>https://aruizca.com/blog/2014/05-how-to-reference-a-file-inside-a-grails-plugin/index.html</link>
      <pubDate>Mon., 7 Apr. 2014 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2014/05-how-to-reference-a-file-inside-a-grails-plugin/index.html</guid>
      	<description>
	&lt;p&gt;&lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;&lt;br&gt; &lt;img src=&quot;https://aruizca.com/blog/2014/img/grails.png&quot; alt=&quot;Grails logo&quot;&gt;&lt;br&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Recently I had to creat a Groovy script that copies some files from my plugin to the host application. The problem is I did not know how to reference those files inside my plugin.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;String yourPluginDir = GrailsPluginUtils.pluginInfos.find { it.name == &apos;your-plugin-name&apos; }.pluginDir
&lt;/code&gt;&lt;/pre&gt;
	</description>
    </item>
    <item>
      <title>Migrating from Grails 2.2 to 2.3</title>
      <link>https://aruizca.com/blog/2014/04-migrating-from-grails-22-to-23/index.html</link>
      <pubDate>Fri., 14 Mar. 2014 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2014/04-migrating-from-grails-22-to-23/index.html</guid>
      	<description>
	&lt;p&gt;&lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;&lt;br&gt; &lt;img src=&quot;https://aruizca.com/blog/2014/img/grails.png&quot; alt=&quot;Grails logo&quot;&gt;&lt;br&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;I am writing this post to record all the things I have done in order to migrate an existing Grails 2.2.x app to 2.3.x.&lt;/p&gt; 
&lt;p&gt;The reasons for me to upgrade are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Project progress is at an early stage where is not very risky to do that. We also have a considerable amount of automatic tests. You have also need to take into consideration that the more major versions you skip, the harder it gets to migrate to the latest version.&lt;/li&gt; 
 &lt;li&gt;Switched dependency resolution engine from Ivy to Aether. I have had problems with Ivy resolving transitive dependencies and snapshots of my own plugin dependencies.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&quot;Forked Execution&quot;&lt;/strong&gt; and the &lt;strong&gt;&quot;Test Runner Daemon&quot;&lt;/strong&gt; should speed up the tests execution and therefore speed up&lt;br&gt; the tests development. This is one of the mayor caveats I have found in Grails so far. We&apos;ll see if they have fixed it with this two new features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;First of all I have read the following posts about this subject, which I think are essential to perform the task at hand:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://grails.org/doc/2.3.x/guide/upgradingFromPreviousVersionsOfGrails.html&quot;&gt;Upgrading from Grails 2.2 - Reference Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.objectpartners.com/2013/10/08/migrating-to-grails-2-3/&quot;&gt;Migrating to Grails 2.3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://blog.milesburton.com/2013/12/11/upgrading-to-grails-2-3-gotchas/&quot;&gt;Upgrading to Grails 2.3 – Gotchas&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;I decided to follow a different approach by specifying what files need to be changed, why and how:&lt;/p&gt; 
&lt;h2&gt;Files I had to alter:&lt;/h2&gt; 
&lt;hr&gt; 
&lt;h3&gt;application.properties&lt;/h3&gt; 
&lt;p&gt;You need to upgrade the grails version number:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;app.grails.version=2.3.7
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;BuildConfig.groovy&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;The groupId should be now in the Config.groovy file. Se next file changes&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enable forked execution (host app and plugins):&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;grails.project.fork = [
    // configure settings for compilation JVM, note that if you alter the Groovy version forked compilation is required
    //  compile: [maxMemory: 256, minMemory: 64, debug: false, maxPerm: 256, daemon:true],

    // configure settings for the test-app JVM, uses the daemon by default
    test: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, daemon:true],
    // configure settings for the run-app JVM
    run: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve:false],
    // configure settings for the run-war JVM
    war: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve:false],
    // configure settings for the Console UI JVM
    console: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256]
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;div class=&quot;alert alert-warning&quot;&gt; &lt;i class=&quot;fa fa-exclamation-triangle fa-fw&quot;&gt;&lt;/i&gt; &lt;strong&gt;Important note!!&lt;/strong&gt;
 &lt;br&gt; At the end I had to disable the forked execution becaue it does not get along very well with IntelliJ IDEA debugging :-( 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;Explicitely set Maven Aether as the default dependency resolution engine (host app and plugins):&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;grails.project.dependency.resolver = &quot;maven&quot; // or ivy
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Upgrade the following plugin dependencies if you are planning to upgrade a Grails host app:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;// plugins for the build system only
build &quot;:tomcat:7.0.52.1&quot;

// plugins for the compile step
compile &quot;:scaffolding:2.0.3&quot;

// plugins needed at runtime but not for compilation
runtime &quot;:hibernate4:4.3.4.1&quot; // or &quot;:hibernate:3.6.10.9&quot;
runtime &quot;:database-migration:1.3.8&quot;
runtime &quot;:resources:1.2.7&quot;
// Uncomment these (or add new ones) to enable additional resources capabilities
//runtime &quot;:zipped-resources:1.0.1&quot;
//runtime &quot;:cached-resources:1.1&quot;
//runtime &quot;:yui-minify-resources:0.1.5&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;If as the snipped above, you want to use Hibernate 4 instead of Hibernate 3, you will have to make sure that your plugin dependencies exclude the Hibernate 3 dependency. This is due to the fact that they are using different artifactId (&quot;&lt;strong&gt;hibernate4&lt;/strong&gt;&quot; instead of &quot;&lt;strong&gt;hibernate&lt;/strong&gt;&quot;). You can exclude dependencies in plugins like this:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;compile(&apos;:plugin-artifactId:version&apos;) {
    excludes &quot;hibernate&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Remove Spock dependencies as they already come built-in with Grails 2.3 (host app and plugins).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Upgrade the following plugin dependencies if you are planning to upgrade a Grails plugin:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;build(&quot;:release:3.0.1&quot;,
    &quot;:rest-client-builder:1.0.3&quot;) {
    export = false
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that you might need to upgrade some other plugins.&lt;/p&gt; 
&lt;h3&gt;Config.groovy&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Automatic reloading is not enabled by default, so if you want it back add the following line:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;grails.reload.enabled = true
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;And then the change mentioned in teh previous section that says that the groupId should be specified here now:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;grails.project.groupId = &quot;whatever&quot; // change this to alter the default package name and Maven publishing destination
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;There are quite a few other little changes. So I suggest creating a new empty Grails app from scratch using Grails 2.3.x and compare the resulting Config.groovy file with your own.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;All Integration Tests that extend GroovyTestCase&lt;/h3&gt; 
&lt;p&gt;All these tests need to remove that inheritance and annotate the class with this Mixin:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@TestMixin(IntegrationTestMixin)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;~/.grails/settings.groovy&lt;/h3&gt; 
&lt;p&gt;If like me, you have your repositories and credentials declared globally, then your settings.xml file should go from this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;...
grails.project.ivy.authentication = {
    repositories {
        mavenRepo &quot;whatever url&quot;

    credentials {
        realm = &quot;Sonatype Nexus Repository Manager&quot;
        host = &quot;whatever&quot;
        username = &quot;whatever&quot;
        password = &quot;whatever&quot;
    }
}
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;...
grails.project.ivy.authentication = {
    repositories {
    	mavenLocal()
        mavenRepo(&quot;whatever url&quot;) {
          if (owner.grailsVersion ==~ /2\.3\..*/) {
              updatePolicy &quot;always&quot;
              auth([
                  username: &apos;whatever&apos;,
                  password: &apos;whatever&apos;
              ])
          }
    	}
    }

    credentials {
        realm = &quot;Sonatype Nexus Repository Manager&quot;
        host = &quot;whatever&quot;
        username = &quot;whatever&quot;
        password = &quot;whatever&quot;
    }
}
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The possible values for &lt;strong&gt;&lt;em&gt;&quot;updatePolicy&quot;&lt;/em&gt;&lt;/strong&gt; are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;never&lt;/strong&gt; – Never check for new snapshots.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;always&lt;/strong&gt; – Always check for new snapshots.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;daily&lt;/strong&gt; – Check once a day for new snapshots (the default).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;interval:x&lt;/strong&gt; – Check once every x minutes for new snapshots.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;I will keep updating this post if I encounter another migration issue.&lt;/p&gt; 
&lt;p&gt;I hope you find it useful. Cheers.&lt;/p&gt; 
&lt;hr&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Update 1&lt;/strong&gt;: Class reloading has to be enabled inside the Config.groovy file not the BuildConfig.groovy file.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Update 2&lt;/strong&gt;: Disabled forked execution because it breaks debugging in IntelliJ IDEA&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Update 3&lt;/strong&gt;: Added possible values for the updatePolicy maven repository settings parameter&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;
	</description>
    </item>
    <item>
      <title>ABC iView Desktop - Using Adobe AIR to wrap your Web Application as a cross-platform Desktop Application</title>
      <link>https://aruizca.com/blog/2014/03-abc-iview-desktop-using-adobe-air-to-wrap-your-web-application-as-a-cross-platform-desktop-application/index.html</link>
      <pubDate>Tue., 28 Jan. 2014 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2014/03-abc-iview-desktop-using-adobe-air-to-wrap-your-web-application-as-a-cross-platform-desktop-application/index.html</guid>
      	<description>
	&lt;p&gt;&lt;img src=&quot;https://aruizca.com/blog/2014/img/adobe-air-logo.png&quot; alt=&quot;Adobe Air logo&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;What is it?&lt;/h2&gt; 
&lt;p&gt;I have known about the &lt;a href=&quot;https://get.adobe.com/air/&quot;&gt;Adobe AIR runtime&lt;/a&gt; and its concept for quite a long time, which were initially introduced back in 2007. It was an attempt to bridge the existing gap between the desktop and browser based apps, keeping as many of their respective advantages as possible.&lt;/p&gt; 
&lt;p&gt;For what I know, basically there are two ways of using Adobe AIR:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;You can develop an application using web technologies like HTML or Flash/&lt;a href=&quot;http://www.adobe.com/au/products/flex.html&quot;&gt;Flex&lt;/a&gt; expecifically targeting this distribution platform, or&lt;/li&gt; 
 &lt;li&gt;You can develop your web application as usual and then wrap it around this &quot;envelope&quot;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Probably, the most important Abobe Air application to ever exist using the first approach was the version of &lt;strong&gt;Tweetdeck&lt;/strong&gt; that existed before it was adquired by Twitter and decided to replace it with a worse native implementation IMO, with less features and &quot;heavier&quot;. It sort of works, but since Twitter changed their APIs, it does not retrieve any messages. If you want to try the last version (0.38.2) anyway click &lt;a href=&quot;https://dl.dropboxusercontent.com/u/8256463/blog-files/TweetDeck_0_38.2.air&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Another instance I normally use is a little application called &lt;a href=&quot;http://code.google.com/p/pomodairo/&quot;&gt;&quot;Pomodairo&quot;&lt;/a&gt;. It aims to replace the physical timer for those who use the &lt;a href=&quot;http://pomodorotechnique.com/&quot;&gt;&quot;Pomodoro Technique&quot;&lt;/a&gt; to increase their productivity. A more well know app built in Adobe Air would be the prototyping tool called &lt;a href=&quot;http://balsamiq.com/download/&quot;&gt;balsamiq&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The second approach, which is the one covered in this post, is the easiest.&lt;br&gt; The first time I thought about it was when I tried to use &lt;a href=&quot;https://trello.com/&quot;&gt;Trello&lt;/a&gt;. Given the way I work or how my brain works, or both, somehow I found it cumbersome to have it opened in one tab of my browser and then I thought that maybe someone felt the same way and used Adobe Air to wrap it. &lt;a href=&quot;https://trello.com/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://aruizca.com/content/images/trello-logo.png&quot; class=&quot;left img-responsive&quot; alt=&quot;trello homepage&quot;&gt;&lt;/a&gt;That is the moment when I came acroos &lt;a href=&quot;http://trellodesktop.com/&quot;&gt;TrelloDesktop&lt;/a&gt; (&lt;strong&gt;Note&lt;/strong&gt;: Sign-in page not working at the time of writing this article).&lt;/p&gt; 
&lt;div&gt; 
 &lt;p&gt;There are some other examples like &lt;a href=&quot;http://www.robertnyman.com/gmdesk/&quot; target=&quot;_blank&quot;&gt;GMDesk&lt;/a&gt; to run GMail, Google Calendar, Docs and Maps as a desktop application. You also have &lt;a href=&quot;http://www.robertnyman.com/facedesk/&quot; target=&quot;_blank&quot;&gt;FaceDesk&lt;/a&gt; to do the same with Facebook and many others.&lt;/p&gt; 
 &lt;p&gt;&lt;a name=&quot;linux-support-info&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;div class=&quot;alert alert-warning&quot;&gt; &lt;i class=&quot;fa fa-exclamation-triangle fa-fw&quot;&gt;&lt;/i&gt; &lt;strong&gt;Important note!!&lt;/strong&gt;
  &lt;br&gt; After finishing this post, I realized that &lt;strong&gt;Adobe Air does not support Linux anymore&lt;/strong&gt; as you can see in their &lt;a href=&quot;http://www.adobe.com/products/air/tech-specs.html&quot; target=&quot;_blank&quot;&gt;system requirements page&lt;/a&gt;. According to Adobe, they decided to drop Linux support after version 2.6 due to little demand from this platform and in order to shift more efforts to Phonegap. Personally I think that complete cross-platform compatibility was its main competitive advantage. You can check their &lt;a href=&quot;http://www.adobe.com/au/products/air/faq.html#linux&quot; target=&quot;_blank&quot;&gt;FAQ&lt;/a&gt; reagarding this matter. I understand that this is a kind a deal breaker for many :-( The only viable alternative is to use Adobe Air on Linux is to use &lt;a href=&quot;http://appdb.winehq.org/objectManager.php?sClass=application&amp;amp;iId=5842&quot; target=&quot;_blank&quot;&gt;Wine&lt;/a&gt;. There is no problem too big with a bit of wine XDD 
 &lt;/div&gt; 
 &lt;h2&gt;Why did I use it?&lt;/h2&gt; 
 &lt;p&gt;As you can see, the main scenario where an approach like this could be interesting is to wrap &lt;a href=&quot;http://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPI (Single Page Interface) applications&lt;/a&gt;. It is of course a matter of personal preference as there is not a clear advantage of doing this unless, like me you agree with these points:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;In a browser is not very easy to switch to the right tab using the keyboard.&lt;/li&gt; 
  &lt;li&gt;From time to time your browser instance is closed either by accident or a crash.&lt;/li&gt; 
  &lt;li&gt;With the advent of mobile apps it happens that an SPI app sometimes feels like it is more convenient as a desktop app without the browser menus, url bars and back and forth buttons issues.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;I got into creating my own desktop application using Adobe Air as I was trying to watch one of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Grand_Designs&quot;&gt;&quot;Kevin McCloud&apos;s Grand Designs&quot;&lt;/a&gt; episodes using the ABC iView web application, which is a Flash App. There I thought I&apos;d rather have this as a separate app as it should not be very difficult using this platform. So next I am going to put the steps I followed to create my own cross platform &quot;ABC iView Destop&quot; app, although &lt;strong&gt;it would apply to any app you&apos;d like to wrap&lt;/strong&gt;.&lt;/p&gt; 
 &lt;h2&gt;Steps:&lt;/h2&gt; 
 &lt;h3&gt;1. Download Adobe Air SDK&lt;/h3&gt; 
 &lt;p&gt;It can be downloaded from the following &lt;a href=&quot;http://www.adobe.com/devnet/air/air-sdk-download.html&quot;&gt;link&lt;/a&gt;. At the time of writing this post, the available version of the runtime was the &lt;strong&gt;4.0&lt;/strong&gt;).&lt;/p&gt; 
 &lt;h3&gt;2. Install Adobe Air SDK&lt;/h3&gt; 
 &lt;p&gt;It is as easy as unzipping the previous downloaded file in a location of your choice and then add the path to the SDK &lt;code&gt;/bin&lt;/code&gt; folder to your &lt;code&gt;PATH&lt;/code&gt; system variable.&lt;/p&gt; 
 &lt;h3&gt;3. Create Air application description&lt;/h3&gt; 
 &lt;p&gt;Firt of all we create an xml file with the name of our choice. In this instance I called it &lt;code&gt;application.xml&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;This file will contain the basic properties of our application. To know more about the available elements have a look at this &lt;a href=&quot;http://help.adobe.com/en_US/air/build/WS2d929364fa0b81374fa5df4f129dca62884-8000.html&quot;&gt;document about setting application properties&lt;/a&gt; and at the &lt;a href=&quot;http://help.adobe.com/en_US/air/build/WS5b3ccc516d4fbf351e63e3d118666ade46-7ff1.html&quot;&gt;&lt;strong&gt;the reference guide&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;Next there is the application description for the iView-Desktop app:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&amp;gt;
&amp;lt;application xmlns=&quot;http://ns.adobe.com/air/application/3.7&quot;&amp;gt;
	&amp;lt;id&amp;gt;iViewDesktop&amp;lt;/id&amp;gt;
	&amp;lt;name&amp;gt;iView - Desktop&amp;lt;/name&amp;gt;
	&amp;lt;filename&amp;gt;iViewDesktop&amp;lt;/filename&amp;gt;
	&amp;lt;versionNumber&amp;gt;1.0.0&amp;lt;/versionNumber&amp;gt;
	&amp;lt;installFolder&amp;gt;iView-Desktop&amp;lt;/installFolder&amp;gt;
	&amp;lt;initialWindow&amp;gt;
		&amp;lt;title&amp;gt;iView - Desktop&amp;lt;/title&amp;gt;
		&amp;lt;content&amp;gt;redirect.html&amp;lt;/content&amp;gt;
		&amp;lt;systemChrome&amp;gt;standard&amp;lt;/systemChrome&amp;gt;
		&amp;lt;transparent&amp;gt;false&amp;lt;/transparent&amp;gt;
		&amp;lt;visible&amp;gt;true&amp;lt;/visible&amp;gt;
		&amp;lt;resizable&amp;gt;true&amp;lt;/resizable&amp;gt; 
		&amp;lt;renderMode&amp;gt;direct&amp;lt;/renderMode&amp;gt;
		&amp;lt;aspectRatio&amp;gt;landscape&amp;lt;/aspectRatio&amp;gt; 
		&amp;lt;autoOrients&amp;gt;true&amp;lt;/autoOrients&amp;gt;
		&amp;lt;width&amp;gt;1024&amp;lt;/width&amp;gt;	
		&amp;lt;height&amp;gt;768&amp;lt;/height&amp;gt;	
	&amp;lt;/initialWindow&amp;gt;
    &amp;lt;icon&amp;gt;
        &amp;lt;image16x16&amp;gt;icons/iview-16x16.png&amp;lt;/image16x16&amp;gt;
        &amp;lt;image32x32&amp;gt;icons/iview-32x32.png&amp;lt;/image32x32&amp;gt;
        &amp;lt;image48x48&amp;gt;icons/iview-48x48.png&amp;lt;/image48x48&amp;gt;
        &amp;lt;image128x128&amp;gt;icons/iview-48x48.png&amp;lt;/image128x128&amp;gt;
    &amp;lt;/icon&amp;gt;
&amp;lt;/application&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;As you can appreciate the &lt;a href=&quot;http://help.adobe.com/en_US/air/build/WSfffb011ac560372f2fea1812938a6e463-8000.html#WSfffb011ac560372f2fea1812938a6e463-7ff4&quot;&gt;initialWindow -&amp;gt; content node&lt;/a&gt; is the most important property, as it contains the URL relative to the root of the application installation folder. This URL points to the &lt;code&gt;.HTML&lt;/code&gt; or &lt;code&gt;.SWF&lt;/code&gt; file that contains your app.&lt;/p&gt; 
 &lt;h3&gt;4. Point to the web app URL&lt;/h3&gt; 
 &lt;p&gt;For this particular case of the ABC iView app I though it would be enough to download the &apos;.SWF&apos; file and reference it in the content property. For some reason I don&apos;t know it did not work. So at the end, I just created a HTML file that contains a script with a redirection to the iView URL:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;  
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;
  &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&amp;gt;

  &amp;lt;script src=&quot;AIRUpdater-1.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt; 
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;script&amp;gt;
  window.location.replace(&quot;http://www.abc.net.au/iview&quot;);  
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Just replacing the URL you can pretty much load any web application you want.&lt;/p&gt; 
 &lt;h3&gt;5. Integrate an automatic upgrade mechanism (optional)&lt;/h3&gt; 
 &lt;p&gt;This step is optional but recommended, as it enables the application to be able to check if there is a new version at start up time and install the upgrade almost automatically.&lt;/p&gt; 
 &lt;p&gt;There is a project called &lt;a href=&quot;http://code.google.com/p/airupdater/&quot;&gt;AirUpdater&lt;/a&gt; which provides a sample script to achieve this just by modifying a few URLs, the application name and by following the instricutions included as inline comments. As you can see in the html file above, this script has been customized and included.&lt;/p&gt; 
 &lt;h3&gt;6. Checking that your app is working&lt;/h3&gt; 
 &lt;p&gt;Using the Adobe Air Debug Launcher (ADL) command-line tool that comes with the SDK, we can run our application without packaging and installation to check that everything is working all right. If the step 1 was performed correctly, you would just need to type in the following command from your project root folder:&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;adl application.xml&lt;/code&gt;&lt;/p&gt; 
 &lt;h3&gt;7. Creating some icons (optional)&lt;/h3&gt; 
 &lt;p&gt;The icons are used as the application file, shortcut, and program menu icons. The application icon should be supplied as a set of at least 16x16, 32x32, 48x48, and 128x128 pixels PNG images. But more if required can also be specified. If those are not provided the default ones will be used.&lt;/p&gt; 
 &lt;p&gt;Specify the path to the icon files &lt;a href=&quot;http://help.adobe.com/en_US/air/build/WSfffb011ac560372f2fea1812938a6e463-8000.html#WSfffb011ac560372f2fea1812938a6e463-7ff6&quot;&gt;in the icon element of the application descriptor file&lt;/a&gt;. Have a look at the application descriptor above to see one example.&lt;/p&gt; 
 &lt;h3&gt;8. Generate a digital certificate to sign the installation package (optional)&lt;/h3&gt; 
 &lt;p&gt;This step is not optional if you don&apos;t have a legit digital certificate.&lt;/p&gt; 
 &lt;p&gt;To generate your own certificate just type in the following command making the modifications you consider appropriate.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;adt -certificate -cn mycertificate 1024-RSA mycertificatefile.p12 password&lt;/code&gt;&lt;/p&gt; 
 &lt;h3&gt;9. Package and sign the application&lt;/h3&gt; 
 &lt;p&gt;Next is the command I used to generate the &lt;code&gt;.air&lt;/code&gt; package.&lt;br&gt; &lt;img src=&quot;https://aruizca.com/blog/2014/img/adobe-air-package.png&quot; alt=&quot;Adobe Air Package&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;Please note that all the files that are to be packaged should be explicitly referenced. Otherwise you will get the famous &lt;strong&gt;&quot;&lt;a href=&quot;https://www.google.com.au/search?q=error+303%3A+icon+xxx+is+missing+from+package&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;aq=t&amp;amp;rls=org.mozilla:en-US:official&amp;amp;client=firefox-a&amp;amp;gfe_rd=cr&amp;amp;ei=phDuUsXVJqeN8Qfz9oHYBQ#q=adobe+air+error+303:+is+missing+from+package&amp;amp;rls=org.mozilla:en-US:official&quot;&gt;error 303: icon xxx is missing from package&lt;/a&gt;&quot;&lt;/strong&gt;.&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;adt -package -storetype pkcs12 -keystore mycertificatefile.p12 iView-Desktop.air application.xml redirect.html AIRUpdater-1.0.js icons\iview128.png icons\iview16.png icons\iview32.png icons\iview48.png
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;10. Create launcher page (optional)&lt;/h3&gt; 
 &lt;p&gt;To distribute your app you can create a page like the ones used in the apps I put as examples earlier.&lt;br&gt; &lt;a href=&quot;http://iview-desktop.aruizca.com/&quot; class=&quot;right&quot; target=&quot;_blank&quot;&gt;&lt;br&gt; &lt;img src=&quot;https://aruizca.com/blog/2014/img/iview-desktop-badge.png&quot; alt=&quot;iView Desktop&quot;&gt;&lt;br&gt; &lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;In those you can appreciate that they all use a flash component to trigger the installation. This component seamlessly takes care of installing the app and the Adobe Air Runtime if it is not already installed in the system.&lt;/p&gt; 
 &lt;p&gt;The installer badge is a flash component usually distributed in the samples included in the SDK, but there is a better resource in this Adobe tutorial:&lt;a href=&quot;http://www.adobe.com/devnet/air/articles/badge_for_air.html&quot;&gt;&lt;strong&gt;&quot;Getting started with the custom install badge&quot;&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
 &lt;h3&gt;11. App. Installation&lt;/h3&gt; 
 &lt;p&gt;Either through the installation badge or just clicking on the .air package generated on step 9 (if you have the Adobe Air runtime already installed), you should be able to install the app and run it. If succesful you should see something like this snapshot:&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://aruizca.com/blog/2014/img/iview-desktop-snapshot.png&quot; alt=&quot;iView Desktop Snapshot&quot;&gt;&lt;/p&gt; 
 &lt;h2&gt;Resources summary&lt;/h2&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;http://iview-desktop.aruizca.com/&quot;&gt;ABC iview-desktop app website.&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/aruizca/iview-desktop&quot;&gt;Source code in GitHub.&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://get.adobe.com/air/&quot;&gt;Adobe Air Runtime.&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;http://www.adobe.com/devnet/air/air-sdk-download.html&quot;&gt;Adobe Air SDK.&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;http://help.adobe.com/en_US/air/build/WSfffb011ac560372f20b57e08128cc91aa2f-8000.html&quot;&gt;Guide: &quot;Developing AIR applications for the desktop&quot;.&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;http://help.adobe.com/en_US/air/build/WS5b3ccc516d4fbf351e63e3d118666ade46-7ff1.html&quot;&gt;Adobe Air application descriptor reference guide.&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;http://www.adobe.com/devnet/air/articles/badge_for_air.html&quot;&gt;Article: &quot;Getting started with the custom install badge&quot;.&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>My MongoDB presentation at the CJUG</title>
      <link>https://aruizca.com/blog/2014/02-my-mongodb-presentation-at-the-cjug/index.html</link>
      <pubDate>Wed., 15 Jan. 2014 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2014/02-my-mongodb-presentation-at-the-cjug/index.html</guid>
      	<description>
	&lt;iframe id=&quot;mongodb-preso&quot; src=&quot;https://aruizca.github.io/mongodb-presentation&quot; style=&quot;width: 100%; height: 500px&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt; 
&lt;p&gt;Long overdue, here is the presentation I did for the &lt;a href=&quot;http://www.cjugaustralia.org/&quot;&gt;Canberra J(ava) Users Group&lt;/a&gt; on&lt;br&gt; the 14th of August 2013.&lt;/p&gt; 
&lt;p&gt;Please click once inside the presentation area and then use the spacebar or the arrow keys to go through the&lt;br&gt; presentation.&lt;/p&gt; 
&lt;p&gt;The presentation was created using the &lt;a href=&quot;http://bartaz.github.io/impress.js&quot;&gt;impress.js&lt;/a&gt; library, which seems to be discontinued. The effects are cool but after a few slides is starts to get a bit cumbersome. At the end I was able to manage the presentation using an online editor specifically designed for impress.js called &lt;a href=&quot;http://strut.io/&quot;&gt;Strut&lt;/a&gt;. Although now it looks like the editor supports other presentation frameworks.&lt;/p&gt; 
&lt;p&gt;In my opinion, the mayor drawback of this library is the lack of partial steps within the same slide. Unfortunately when I realized about that I was too advanced to go back.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>How to upgrade your HDMI dongle MK809II to Android 4.2.2 with the Finless ROM 2.0</title>
      <link>https://aruizca.com/blog/2014/01-how-to-upgrade-your-hdmi-dongle-mk809ii-to-android-422-with-the-finless-rom-20/index.html</link>
      <pubDate>Sun., 12 Jan. 2014 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2014/01-how-to-upgrade-your-hdmi-dongle-mk809ii-to-android-422-with-the-finless-rom-20/index.html</guid>
      	<description>
	&lt;p&gt;&lt;img src=&quot;https://aruizca.com/blog/2014/img/mk809II-Android-4.2.png&quot; alt=&quot;mk809II&quot;&gt;&lt;/p&gt; 
&lt;p&gt;This post is a concise and comprehensive summary of the steps I have followed to upgrade my HDMI dongle MK809II (Rochip RK3066 chipset) to use the &lt;strong&gt;4.2.2&lt;/strong&gt; version of &lt;strong&gt;Android&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;After reading plenty of confusing guides, finally I stambled upon this video bellow which explains the process for the older 1.7 version of the Finless ROM. But if all you want is to flash a ROM, you can &lt;strong&gt;skip to the 26:30 minute&lt;/strong&gt;.&lt;/p&gt; &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/VYdMydq7css&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt; 
&lt;p&gt;Once I watched the video, I had to search for un updated version of the ROM, tools and drivers, as the Finless ROM version 1.7 that appears on the video is based on Android 4.1.1. For your conveniece, I have included here all the files that are required to flash the new ROM:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/8256463/blog-files/imito_mx1_2_finless_20_jb422.zip&quot;&gt;Finless ROM 2.0 for imito MX1 and MX2 devices (compatible) + the ROM Flashing tool RKAndroidTool 1.35&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/8256463/blog-files/Rockchip_Batch_Tool_v1.7.rar&quot;&gt;Rockchip Batch Tool 1.7 + Rock USB drivers 3.5 for Windows&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div class=&quot;alert alert-warning&quot;&gt;
  Disclaimer!! Perform these steps at your own risk. I performed them succesfully in my device, but there is not 100% guaratee that you won&apos;t have some sort of issue along the way. 
&lt;/div&gt; 
&lt;p&gt;Next are the steps I followed to flash de ROM:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Connect your device to your PC using the microUSB connector located at the bottom which is labeled as &lt;code&gt;&quot;DC&quot;&lt;/code&gt;.&lt;br&gt; Remember that in order to provide with enough electric current, generally you need to connect the device to either a USB 3.0 port, 2 USB 2.0 ports or a USB 2.0 hub with external power supply.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enable the option &lt;code&gt;&quot;Connect to PC&quot;&lt;/code&gt;in your device. This options is located under &lt;code&gt;Settings -&amp;gt; USB&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now we need to set the device in flash mode. To do that we will use the rockchip batch tool that you can find above. Once opened you should see something similar to this screenshot:&lt;br&gt; &lt;img src=&quot;https://aruizca.com/blog/2014/img/RKBatchTool.png&quot; alt=&quot;Rockchip batch Tool&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;All you need to do is click on the &lt;code&gt;&quot;Switch&quot;&lt;/code&gt; button. If you had it connected to a screen you should see the video go off.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The first time you do this, Windows will try to install the new device without success and that is why you have the drivers included in one of the files listed above. Use the &lt;code&gt;&quot;Windows Device Manager&quot;&lt;/code&gt; to install the drivers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now is time to open the ROM Flash tool &lt;code&gt;&quot;RKAndoidTool&quot;&lt;/code&gt; included with the ROM. The only thing you would need to select here is if you want to use the Boot/Kernel for a 720p or a 1080p native resolution:&lt;br&gt; &lt;img src=&quot;https://aruizca.com/blog/2014/img/RKAndroidTool.png&quot; alt=&quot;Flash ROM tool RKAndroidTool&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Notice that in the footer of the tool, it should appera the message: &lt;code&gt;&quot;Found RKAndroid Mass Storage USB&quot;&lt;/code&gt;. If that&apos;s the case, you are good to press the &lt;code&gt;&quot;Flash ROM&quot;&lt;/code&gt; button.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Once it is finished the device will reboot itself. Please be patient and wait for the first boot to happen.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;I hope you find it useful. Please let me know if you have any problems.&lt;/p&gt; 
&lt;p&gt;Cheers,&lt;/p&gt;
	</description>
    </item>

  </channel> 
</rss>
